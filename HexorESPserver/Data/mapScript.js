/* 
* made by: Tomáš Hmiro
* 31. 01. 2024 
* main part of Diploma work made for Hexor II robot 
* 
* part 1
* 
* will be split into parts because ESP cannot deliver too large files in short enough time
* 
* 1) draws map given by robot (asks for it) remake it into array (image) in 0-255 shades of grey ;P --- (it was really running song by weeknd from 50 shades of grey in my headphose when writing this comment)
* 2) periodicly asks for robot location to show it in that map
* 3) generates path to the target location (recursive function metod), clear the path by "vector" simplyfication (works well on map size 100x100px (tested))
* 4) draws the generated path with important points (possible corners of obstacles)
* 
* 5) operator can choose the target, can input previously generated map and by "ctrl + left mouse" click in END mode put the robot in map
* 6) operator can draw obstacles which will affect the path generation (virtual obstacles
* 7) in move mode operator can just move map (left click a drag) image, zoom (wheel scroll +-)
* 8) in all modes operator can move around by (wheel draging), zoom (wheel scroll +-)
* 9) page is optimized on PC and may be tested on mobile phone (Android)
* 
* TODO:
* 1) info button -> color legend & more
* 2) saving map to cookies or other temp PC/phone memmory
* 3) add touchscreen compatibility 
* 
* 
* This file contains script that takes care of canvas map most of them are just events and some actual functions are moved to another file
* 
* <script src="mapScript.js"></script>
*   
* 
*  <script src="controlScript.js"></script>
*   <script src="mapScript.js"></script>
*   <script src="mapFcnScript.js"></script>
*   <script src="mapFcn1Script.js"></script>
*   <script src="mapFcn2Script.js"></script>
* 
*/

//global variables ------------------------------------------------------
const downSizing = 10;
let tim; //ID of timer inteval to draw map changes of client actions    

//Constants
const pixelSize = 1;
const pixelsInCm = 20;//1px is 20cm
const RS = 40; //robot size in cm
const RobotSizeWS = Math.round((RS / pixelsInCm) / 2, 1); //robot size (pixels ocupied by robot) derived from pixels in cm
const mapModes = ["move", "select", "info", "drawObject"];
let mapMode = mapModes[0], lastMapMode; //default map mode 

//target position in native map coordinates (not affected by zoom or shift of map in canvas)
//Structure to share with robot MCU
let Target = { x: 0, y: 0, size: 1, en: false, valid: true, change: true, scaling: { H: 1, W: 1 } }; //Goal -> MCU
let Robot = { x: 0, y: 0, size: 2, en: false, valid: true, change: true, scaling: { H: 1, W: 1 } };  //Start <- MCU

//Robot = JSON.parse(sessionStorage.getItem("RobotGlobal"));
// = { x: 0, y: 0, size: 1, en: false, valid: true, change: true, scaling: { H: 1, W: 1 } };  //Start <- MCU

let importantPathPoints = []; // -> MCU to make moves (point in space to reach)

//definition path points: { x: -1, y: -1, importance: -1};
let path = [], Goal;
let v = 0, newTryOutPoints = [];//, tryOutNmr = 0;
let pathDirection = "SE"; //let direction = ["SE","ES"]; //SE = start to end, ES = end to start
const fid = [45, 315, 90, 270, 135, 225, 180];
let change = true, maxVectorLen = 0;

//mouse variables
let locX1, locY1, W, H, tempLocX1, tempLocY1, tempLocX2, tempLocY2;
var mouseBtns = { left: 0, wheel: 1, right: 2, btn4: 3, btn5: 4 };
let isDragging = false;
let startX, startY, startScrollX = 2, startScrollY = 2, locX = -20, locY = -20;

//Map define
let mapImageH, mapImageW; //size of map defined by user or
//binary represantation of map in string recieved from ESP server 
let mapStringArray;
let img, genMesh = false, pathGenerated = false;
let mapColors = {
    path: "#c7fe0c", cornerPoints: "#682dfa", robot: "#f89b06", target: "#00FF00",
    obstacles: "#1d1c1c", workspace: "#565656", pathTouched: "#111111",
    pointVal2: "#565656", highlightedPoint: "#FF0000", triedPath: "#70ff00",
    beforeOptimalization: "#FF00FF", freeSpace: "#f0f0f0", pointVal3: "#0f0f0f"
};

//debugging purpose variables:
let runningOnServer = false;
let drawPathIdx = 0, drawOpPathIdx = 0, drawOpObjPath = [];

//DOM objects
let canvas = document.getElementById("map");
let context;// = canvas.getContext("2d");
let move = document.getElementById("moveInMap");
let pointSel = document.getElementById("endPointSel");
let drawObject = document.getElementById("drawObject");
let infoBut = document.getElementById("infoInMap");
let skipDraw = document.getElementById("skipRedraw");
let drawPoint = document.getElementById("drawPoint");    
let mMBtn = document.getElementById('mainMenuButton');



function mapScript_Onload() { 
    canvas = document.getElementById("map");
    context = canvas.getContext("2d");
    move = document.getElementById("moveInMap");
    pointSel = document.getElementById("endPointSel");
    drawObject = document.getElementById("drawObject");
    infoBut = document.getElementById("infoInMap");
    skipDraw = document.getElementById("skipRedraw");
    drawPoint = document.getElementById("drawPoint");
    mMBtn = document.getElementById('mainMenuButton');

    //debug but possibly useful
    const idxInPath = document.getElementById("idxInPath");
    const pathLength = document.getElementById("pathLength");
    const resetIdx = document.getElementById("resetIdx");

    //Init functions
    modeChangeMap();
    
    //var RFtimerID =
    setInterval(refreshData, 5000);

    //init divider sizes

    /* 
     * variables defined on server or by server added or redefined in     
     * preprocessor if they are captured there
     */

    /*%ROS%*/ //if runnging on server this will be rewrited by preprocesor and be that set to TRUE (for offline debug purpose)
    /*%RS%*/ //robot size based on program in ESP if connected to Robot
    /*%MODE%*/

    
    if (!runningOnServer) {
        //map made for testing
        mapStringArray
        //call only in offline mode ... make the move btns work only for map not on robot
        scripInit();

        mapEnvSet(); //first call on load running without server
    } else {
        //ask for map but in the time server tries to respond create the free map in case there is no other saved on server   
        //then 
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState == 4 && xhttp.status == 200) {
                let res = this.response.split(";"); //split for other purpose if there is no ";" then res = this.response 
                if (res[0].length > 10 && res[0] != "no_map") {
                    mapImageW = res[0];
                    mapImageH = res[1];
                    mapStringArray = res[2];
                }
                else if (res[0] == "no_map") { //if there is a no_map response than create new map with defined size
                    //create a free map 100x100 
                    if (res[1] > 0 && res[2] > 0) {
                        createFreeMap(res[1], res[2]); //response with map size base is 100x100 but may add value to save for different map size
                    }                        
                }
                else {
                    //create full default (100x100) map with possibility for wrong comm alert
                    createFreeMap(100,100);
                }
                mapEnvSet();
            }
        }
        xhttp.open("GET", "/map", true);
        xhttp.send();
        createFreeMap(100, 100);
        mapEnvSet();
        
     // if (mapLoaded == "loaded") mapEnvSet();
    }

    //EVENTS ---------------------------------------------------------------------------------------------------------------------
    //map part of webpage
    canvas.addEventListener("mousedown", (e) => {
        pushDown(e);
    });

    canvas.addEventListener("touchstart", (e) => {
        pushDown(e);
    });

    document.addEventListener("mouseup", (e) => {
        pullUp(e);       
    });

    document.addEventListener("touchend", (e) => {
        pullUp(e);
    });

    document.addEventListener("mousemove", (e) => {        
        cursoreMove(e);
    });

    document.addEventListener("touchmove", (e) => {
        cursoreMove(e);
    });

    canvas.addEventListener("wheel", (e) => {
        rect = canvas.getBoundingClientRect();
        W = (canvas.width / canvas.clientWidth);
        H = (canvas.height / canvas.clientHeight);
        locX = Math.round((e.clientX - rect.left) * W, 1);
        locY = Math.round((e.clientY - rect.top) * H, 1);
        tempLocX1 = (locX - startScrollX) / Target.scaling.W;
        tempLocY1 = (locY - startScrollY) / Target.scaling.H;
        e.preventDefault();
        const zoomFactor = -e.deltaY > 0 ? 1.1 : 0.9;
        scale *= zoomFactor;
        scaleH = scale * H;
        scaleW = scale * W;
        Target.scaling.H = scaleH;
        Target.scaling.W = scaleW;
        Robot.scaling.H = scaleH;
        Robot.scaling.W = scaleW;
        tempLocX2 = (locX - startScrollX) / Target.scaling.W;
        tempLocY2 = (locY - startScrollY) / Target.scaling.H;
        startScrollX += ((tempLocX2 - tempLocX1)) * scaleW;
        startScrollY += ((tempLocY2 - tempLocY1)) * scaleH;
        if ((startScrollX + mapImageW * scaleW) < 0 || (startScrollX > canvas.clientWidth/2)) {
            startScrollX = 2;
        }
        if ((startScrollY + mapImageH * scaleH) < 0 || (startScrollY > canvas.clientHeight/2)) {
            startScrollY = 2;
        }
        draw();   
        
    });

    move.addEventListener("click", () => {
        mapMode = mapModes[0];
        modeChangeMap();
    });

    pointSel.addEventListener("click", () => {
        mapMode = mapModes[1];
        modeChangeMap();
    });

    drawObject.addEventListener("click", () => {
        mapMode = mapModes[3];
        modeChangeMap();
    });

    infoBut.addEventListener("click", () => {
        mapMode = mapModes[2];
        modeChangeMap();        
    });

    idxInPath.addEventListener("change", () => {
        drawPathIdx = idxInPath.value;
    });

    resetIdx.addEventListener("click", () => {
        idxInPath.value = 0;
        drawPathIdx = 0;
    });

    drawPoint.addEventListener("click", () => {        
        if (path[0] == undefined || drawPathIdx > Number(pathLength.innerHTML)-1) {
            return;
        }
        drawAnyPoint(path[drawPathIdx++], mapColors.highlightedPoint);
        drawPathIdx = drawPathIdx < Number(pathLength.innerHTML)-1 ? drawPathIdx : 0;
        idxInPath.value = drawPathIdx;
    });

    document.addEventListener("resize", draw);

    /*
    document.addEventListener("keypress", (e) => {
        let BtnRobot = document.getElementById("MMrobot");
        a = BtnRobot.style.backgroundColor;
        if (!runningOnServer && a == "rgb(35, 255, 1)") {
            let mDirection = -1;
                switch (e.key) {
                    case setKeys[left]:
                        console.log('left');
                        mDirection = 3;
                        break;
                    case setKeys[back]:
                        console.log('back');
                        mDirection = 7;
                        break;
                    case setKeys[right]:
                        console.log('right');
                        mDirection = 5;
                        break;
                    case setKeys[forward]:
                        console.log('fwd');
                        mDirection = 1;
                        break;
                    case setKeys[stop]:
                        console.log('stop');

                        break;
                    case setKeys[mode1]:
                        console.log('mode1');

                        break;
                    case setKeys[mode2]:
                        console.log('mode2');

                        break;
                    case setKeys[mode3]:
                        console.log('mode3');

                        break;
                    case setKeys[mode4]:
                        console.log('mode4');
                        break;
                    default:
                        break;
            }
            
        }
    });
    */
}
